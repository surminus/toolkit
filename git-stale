#!/usr/bin/env bash
# set -euo pipefail

# The number of days to try removing old branches
OLDER_THAN_DAYS=365

function interactive_branch_delete() {
  branches=$1
  title=$2

  if [[ -z "${branches}" ]]; then
    echo "No ${title} branches discovered"
    return
  fi

  echo "${title^} branches to delete:"
  for branch in ${branches}; do
    echo "${branch}"
  done

  read -p "Delete these branches [y/n/[p]ick]? : " -n 1 -r response
  echo

  if [[ ${response} =~ ^[Pp]$ ]]; then
    for branch in ${branches}; do
      git show "${branch}"
      echo
      read -p "Delete ${branch}? [y/n] : " -n 1 -r answer
      echo

      if [[ ${answer} =~ ^[Yy]$ ]]; then
        git branch -D "${branch}"
      fi
    done

    return
  fi

  if [[ ! ${response} =~ ^[Yy]$ ]]; then
    return
  fi

  for branch in ${branches}; do
    git branch -D "${branch}"
  done
}

function stale() {
  local_branches=$(git for-each-ref --format '%(refname)' refs/heads | sed 's|refs/heads/||g' |sort)
  remote_branches=$(git ls-remote --quiet --heads | awk '{print $2}' | sed 's|refs/heads/||g' |sort)
  stale_branches=$(diff <(echo "${local_branches}") <(echo "${remote_branches}") | grep '^<' | awk '{print $2}')

  interactive_branch_delete "${stale_branches}" "stale"
}

function merged() {
  default_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
  merged_branches=$(git branch --merged | grep -v "${default_branch}\|*" | sort)

  interactive_branch_delete "${merged_branches}" "merged"
}

function old() {
  local older_than_seconds=$((60 * 60 * 24 * OLDER_THAN_DAYS))

  old_branches=$(git for-each-ref refs/heads | while read -r commit _type ref; do
    current=$(date +%s)
    headcd=$(git log -1 --pretty=%cd --date=format:%s "${commit}")

    if [[ $((current-headcd)) -ge ${older_than_seconds} ]]; then
      echo "$ref" | sed 's|refs/heads/||g' |sort
    fi
  done)

  interactive_branch_delete "${old_branches}" "old"
}

function main() {
  git fetch -p -q

  stale
  merged
  old
}

main
